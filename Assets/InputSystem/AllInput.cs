//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/AllInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AllInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AllInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AllInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""fd5ff348-ba22-4dd7-a578-d0d92f7017fb"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""98709ac0-92e0-4075-9398-4e7ce53a96b6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""35bba937-edd5-419d-a413-717cc2c360b6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""c3d98919-0222-4b89-b6e0-2e588c14bdf0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RunStart"",
                    ""type"": ""Button"",
                    ""id"": ""b28bd2a5-3471-4750-8338-b8a7e15bcc9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RunFinish"",
                    ""type"": ""Button"",
                    ""id"": ""660c0b06-1e20-4523-8ef9-f817e99a9e74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""cdf8bec4-8c19-4323-9386-fb5009da8ac2"",
                    ""path"": ""Dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""40a28db1-52ba-4d17-8304-cceae3e67fcb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""05ec431e-4e0c-44d1-bcfd-88f904ed0785"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8ff0f989-8f9a-4599-8f4d-8081103786d6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a8257b03-313d-47a7-a15f-a1bf87f80043"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0b75605c-fae8-4cbb-995d-b626e346172c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""01f51f66-675d-42a3-a508-b486ed07a00b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5f35819d-e6e4-4e3a-a04f-495496023a4a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""132670c1-5522-45fa-bde7-a95aef61ae77"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b8d1da25-4715-447f-80fb-4534307ea127"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse;Touch"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""595c0452-db08-4b89-8a3a-4c942de52c15"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b50e3530-d02d-4cc1-a459-3c6e65876941"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""RunStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d70adf90-5f8e-4479-b4ea-d2979044ad12"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RunFinish"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""ea5e6531-5e7b-4160-ba1b-737d2e93627a"",
            ""actions"": [
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""bbbdfbb5-7cc8-4370-b149-b60270d70e09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crafting"",
                    ""type"": ""Button"",
                    ""id"": ""a133d034-1aa3-44cd-b35f-4bacaf46c22a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""76242cf4-0b90-4b15-917f-a4ea770f92ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BuildMode"",
                    ""type"": ""Button"",
                    ""id"": ""39826552-bc06-427b-bb9c-5cffe398bc66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c9019eb9-46e8-463a-af62-a70f194b04cf"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7eae317e-2c3c-4df9-9e5b-43a22ebb1e1e"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crafting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d5d9193-b8ee-4d5a-852b-7f152e3117a5"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dd3aade-4d04-4b32-9271-89ac9b19569a"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuildMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""id"": ""8380ef59-acf5-445e-ba2b-b10bebda90ce"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""6acc7c1b-5e2c-43b8-91c0-cb74ab05d90c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""e5486c4a-48bc-4005-8d2b-d3f0dece0e36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartClick"",
                    ""type"": ""Button"",
                    ""id"": ""cd91ce6b-718f-42cd-b9fd-72cfd72cb1ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EndClick"",
                    ""type"": ""Button"",
                    ""id"": ""41e031c7-ff29-402c-b136-7843c3a039d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a36eaa86-1d0b-4fec-8d4e-fef43d537669"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b606e83-a536-49ec-8581-8ac99fe46f64"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8124ecf-f64f-4e9b-ad58-4da05142da29"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a23da263-3560-473b-a3d3-8e431d08bc0c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EndClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""id"": ""f60df8ad-4b51-4be7-af8d-994f7b8aef27"",
            ""actions"": [
                {
                    ""name"": ""add"",
                    ""type"": ""Button"",
                    ""id"": ""4ff23081-2c5e-4fa5-9094-2d5e49db5374"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""remove"",
                    ""type"": ""Button"",
                    ""id"": ""e2197d43-ca26-43b4-83ae-603f61b6f56b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""512b2ce8-a60f-40c9-b0ef-e30ef8ae01e3"",
                    ""path"": ""<Keyboard>/numpadPlus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""add"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d923505e-82f9-474f-9c78-f26c2bba8476"",
                    ""path"": ""<Keyboard>/numpadMinus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""remove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BuildMode"",
            ""id"": ""4e6a0b3d-3c1c-429c-be2f-0180acd01413"",
            ""actions"": [
                {
                    ""name"": ""remove"",
                    ""type"": ""Button"",
                    ""id"": ""5ff5cc61-5b4b-42fb-ae77-c6ad0517f261"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""add"",
                    ""type"": ""Button"",
                    ""id"": ""8800f7de-835d-48de-a921-83e7462bac69"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""rotate"",
                    ""type"": ""Button"",
                    ""id"": ""e3720cbd-4dd6-42c7-b161-34ed09d20b5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9aa3ea45-8588-4e0b-bfc3-cf7f41125257"",
                    ""path"": ""<Keyboard>/numpadPlus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""add"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02267c55-39c6-4f24-9a4b-d934c0453d92"",
                    ""path"": ""<Keyboard>/numpadMinus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""remove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f50a6d8-e84f-4537-94fc-444d00fff731"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_Fire = m_Player.FindAction("Fire", throwIfNotFound: true);
        m_Player_RunStart = m_Player.FindAction("RunStart", throwIfNotFound: true);
        m_Player_RunFinish = m_Player.FindAction("RunFinish", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Inventory = m_UI.FindAction("Inventory", throwIfNotFound: true);
        m_UI_Crafting = m_UI.FindAction("Crafting", throwIfNotFound: true);
        m_UI_PauseMenu = m_UI.FindAction("PauseMenu", throwIfNotFound: true);
        m_UI_BuildMode = m_UI.FindAction("BuildMode", throwIfNotFound: true);
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_Position = m_Mouse.FindAction("Position", throwIfNotFound: true);
        m_Mouse_Click = m_Mouse.FindAction("Click", throwIfNotFound: true);
        m_Mouse_StartClick = m_Mouse.FindAction("StartClick", throwIfNotFound: true);
        m_Mouse_EndClick = m_Mouse.FindAction("EndClick", throwIfNotFound: true);
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_add = m_Keyboard.FindAction("add", throwIfNotFound: true);
        m_Keyboard_remove = m_Keyboard.FindAction("remove", throwIfNotFound: true);
        // BuildMode
        m_BuildMode = asset.FindActionMap("BuildMode", throwIfNotFound: true);
        m_BuildMode_remove = m_BuildMode.FindAction("remove", throwIfNotFound: true);
        m_BuildMode_add = m_BuildMode.FindAction("add", throwIfNotFound: true);
        m_BuildMode_rotate = m_BuildMode.FindAction("rotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_Fire;
    private readonly InputAction m_Player_RunStart;
    private readonly InputAction m_Player_RunFinish;
    public struct PlayerActions
    {
        private @AllInput m_Wrapper;
        public PlayerActions(@AllInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @Fire => m_Wrapper.m_Player_Fire;
        public InputAction @RunStart => m_Wrapper.m_Player_RunStart;
        public InputAction @RunFinish => m_Wrapper.m_Player_RunFinish;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Fire.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire;
                @RunStart.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRunStart;
                @RunStart.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRunStart;
                @RunStart.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRunStart;
                @RunFinish.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRunFinish;
                @RunFinish.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRunFinish;
                @RunFinish.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRunFinish;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @RunStart.started += instance.OnRunStart;
                @RunStart.performed += instance.OnRunStart;
                @RunStart.canceled += instance.OnRunStart;
                @RunFinish.started += instance.OnRunFinish;
                @RunFinish.performed += instance.OnRunFinish;
                @RunFinish.canceled += instance.OnRunFinish;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_Inventory;
    private readonly InputAction m_UI_Crafting;
    private readonly InputAction m_UI_PauseMenu;
    private readonly InputAction m_UI_BuildMode;
    public struct UIActions
    {
        private @AllInput m_Wrapper;
        public UIActions(@AllInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Inventory => m_Wrapper.m_UI_Inventory;
        public InputAction @Crafting => m_Wrapper.m_UI_Crafting;
        public InputAction @PauseMenu => m_Wrapper.m_UI_PauseMenu;
        public InputAction @BuildMode => m_Wrapper.m_UI_BuildMode;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @Inventory.started -= m_Wrapper.m_UIActionsCallbackInterface.OnInventory;
                @Inventory.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnInventory;
                @Inventory.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnInventory;
                @Crafting.started -= m_Wrapper.m_UIActionsCallbackInterface.OnCrafting;
                @Crafting.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnCrafting;
                @Crafting.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnCrafting;
                @PauseMenu.started -= m_Wrapper.m_UIActionsCallbackInterface.OnPauseMenu;
                @PauseMenu.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnPauseMenu;
                @PauseMenu.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnPauseMenu;
                @BuildMode.started -= m_Wrapper.m_UIActionsCallbackInterface.OnBuildMode;
                @BuildMode.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnBuildMode;
                @BuildMode.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnBuildMode;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
                @Crafting.started += instance.OnCrafting;
                @Crafting.performed += instance.OnCrafting;
                @Crafting.canceled += instance.OnCrafting;
                @PauseMenu.started += instance.OnPauseMenu;
                @PauseMenu.performed += instance.OnPauseMenu;
                @PauseMenu.canceled += instance.OnPauseMenu;
                @BuildMode.started += instance.OnBuildMode;
                @BuildMode.performed += instance.OnBuildMode;
                @BuildMode.canceled += instance.OnBuildMode;
            }
        }
    }
    public UIActions @UI => new UIActions(this);

    // Mouse
    private readonly InputActionMap m_Mouse;
    private IMouseActions m_MouseActionsCallbackInterface;
    private readonly InputAction m_Mouse_Position;
    private readonly InputAction m_Mouse_Click;
    private readonly InputAction m_Mouse_StartClick;
    private readonly InputAction m_Mouse_EndClick;
    public struct MouseActions
    {
        private @AllInput m_Wrapper;
        public MouseActions(@AllInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_Mouse_Position;
        public InputAction @Click => m_Wrapper.m_Mouse_Click;
        public InputAction @StartClick => m_Wrapper.m_Mouse_StartClick;
        public InputAction @EndClick => m_Wrapper.m_Mouse_EndClick;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void SetCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnPosition;
                @Click.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnClick;
                @StartClick.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnStartClick;
                @StartClick.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnStartClick;
                @StartClick.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnStartClick;
                @EndClick.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnEndClick;
                @EndClick.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnEndClick;
                @EndClick.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnEndClick;
            }
            m_Wrapper.m_MouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @StartClick.started += instance.OnStartClick;
                @StartClick.performed += instance.OnStartClick;
                @StartClick.canceled += instance.OnStartClick;
                @EndClick.started += instance.OnEndClick;
                @EndClick.performed += instance.OnEndClick;
                @EndClick.canceled += instance.OnEndClick;
            }
        }
    }
    public MouseActions @Mouse => new MouseActions(this);

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private IKeyboardActions m_KeyboardActionsCallbackInterface;
    private readonly InputAction m_Keyboard_add;
    private readonly InputAction m_Keyboard_remove;
    public struct KeyboardActions
    {
        private @AllInput m_Wrapper;
        public KeyboardActions(@AllInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @add => m_Wrapper.m_Keyboard_add;
        public InputAction @remove => m_Wrapper.m_Keyboard_remove;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterface != null)
            {
                @add.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnAdd;
                @add.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnAdd;
                @add.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnAdd;
                @remove.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRemove;
                @remove.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRemove;
                @remove.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRemove;
            }
            m_Wrapper.m_KeyboardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @add.started += instance.OnAdd;
                @add.performed += instance.OnAdd;
                @add.canceled += instance.OnAdd;
                @remove.started += instance.OnRemove;
                @remove.performed += instance.OnRemove;
                @remove.canceled += instance.OnRemove;
            }
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);

    // BuildMode
    private readonly InputActionMap m_BuildMode;
    private IBuildModeActions m_BuildModeActionsCallbackInterface;
    private readonly InputAction m_BuildMode_remove;
    private readonly InputAction m_BuildMode_add;
    private readonly InputAction m_BuildMode_rotate;
    public struct BuildModeActions
    {
        private @AllInput m_Wrapper;
        public BuildModeActions(@AllInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @remove => m_Wrapper.m_BuildMode_remove;
        public InputAction @add => m_Wrapper.m_BuildMode_add;
        public InputAction @rotate => m_Wrapper.m_BuildMode_rotate;
        public InputActionMap Get() { return m_Wrapper.m_BuildMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildModeActions set) { return set.Get(); }
        public void SetCallbacks(IBuildModeActions instance)
        {
            if (m_Wrapper.m_BuildModeActionsCallbackInterface != null)
            {
                @remove.started -= m_Wrapper.m_BuildModeActionsCallbackInterface.OnRemove;
                @remove.performed -= m_Wrapper.m_BuildModeActionsCallbackInterface.OnRemove;
                @remove.canceled -= m_Wrapper.m_BuildModeActionsCallbackInterface.OnRemove;
                @add.started -= m_Wrapper.m_BuildModeActionsCallbackInterface.OnAdd;
                @add.performed -= m_Wrapper.m_BuildModeActionsCallbackInterface.OnAdd;
                @add.canceled -= m_Wrapper.m_BuildModeActionsCallbackInterface.OnAdd;
                @rotate.started -= m_Wrapper.m_BuildModeActionsCallbackInterface.OnRotate;
                @rotate.performed -= m_Wrapper.m_BuildModeActionsCallbackInterface.OnRotate;
                @rotate.canceled -= m_Wrapper.m_BuildModeActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_BuildModeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @remove.started += instance.OnRemove;
                @remove.performed += instance.OnRemove;
                @remove.canceled += instance.OnRemove;
                @add.started += instance.OnAdd;
                @add.performed += instance.OnAdd;
                @add.canceled += instance.OnAdd;
                @rotate.started += instance.OnRotate;
                @rotate.performed += instance.OnRotate;
                @rotate.canceled += instance.OnRotate;
            }
        }
    }
    public BuildModeActions @BuildMode => new BuildModeActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnRunStart(InputAction.CallbackContext context);
        void OnRunFinish(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnInventory(InputAction.CallbackContext context);
        void OnCrafting(InputAction.CallbackContext context);
        void OnPauseMenu(InputAction.CallbackContext context);
        void OnBuildMode(InputAction.CallbackContext context);
    }
    public interface IMouseActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
        void OnStartClick(InputAction.CallbackContext context);
        void OnEndClick(InputAction.CallbackContext context);
    }
    public interface IKeyboardActions
    {
        void OnAdd(InputAction.CallbackContext context);
        void OnRemove(InputAction.CallbackContext context);
    }
    public interface IBuildModeActions
    {
        void OnRemove(InputAction.CallbackContext context);
        void OnAdd(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
    }
}
